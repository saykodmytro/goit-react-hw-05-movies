{"version":3,"file":"static/js/736.6640e83a.chunk.js","mappings":"kOAgDA,UA1CgB,WACd,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACRE,GAAyCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA9CI,EAAYF,EAAA,GAAEG,EAAgBH,EAAA,GACrCI,GAA4BL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAApCE,EAAMD,EAAA,GAAEE,EAASF,EAAA,GACxBG,GAA0BT,EAAAA,EAAAA,UAAS,MAAKU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAAjCE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GAiBtB,OAfAG,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAF,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEE,OAFFF,EAAAC,KAAA,EAEdb,GAAU,GAAMY,EAAAE,KAAA,GACGC,EAAAA,EAAAA,IAAgB1B,GAAS,KAAD,EAArCsB,EAAIC,EAAAI,KACVpB,EAAiBe,GAAMC,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAK,GAAAL,EAAA,SAEvBR,EAASQ,EAAAK,GAAMC,SAAS,QAEP,OAFON,EAAAC,KAAA,GAExBb,GAAU,GAAOY,EAAAO,OAAA,6BAAAP,EAAAQ,OAAA,GAAAV,EAAA,wBAEpB,kBAVc,OAAAH,EAAAc,MAAA,KAAAC,UAAA,KAWfhB,GACF,GAAG,CAACjB,IAE2B,IAAxBM,EAAa4B,QAClBC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,aAAYC,SAAC,qDAI3BC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,CACG3B,IAAUyB,EAAAA,EAAAA,KAACI,EAAAA,EAAM,IACP,OAAVzB,IAAkBqB,EAAAA,EAAAA,KAAA,KAAGC,UAAU,aAAYC,SAAEvB,KAC9CqB,EAAAA,EAAAA,KAAA,MAAIC,UAAU,oBAAmBC,SACN,IAAxB/B,EAAa4B,QACZ5B,EAAakC,KAAI,SAAAC,GAAA,IAAGC,EAAED,EAAFC,GAAIC,EAAMF,EAANE,OAAQC,EAAOH,EAAPG,QAAO,OACrCN,EAAAA,EAAAA,MAAA,MAAaF,UAAU,aAAYC,SAAA,EACjCC,EAAAA,EAAAA,MAAA,MAAIF,UAAU,aAAYC,SAAA,CAAC,WAASM,MACpCL,EAAAA,EAAAA,MAAA,KAAGF,UAAU,kBAAiBC,SAAA,CAAC,YAAUO,OAFlCF,EAGJ,QAKjB,C","sources":["pages/Reviews.jsx"],"sourcesContent":["import { getMovieReviews } from 'api/themoviedb-api';\nimport { useEffect } from 'react';\nimport Loader from 'components/Loader/Loader';\nimport React, { useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [movieReviews, setMoviesReviews] = useState([]);\n  const [loader, setLoader] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoader(true);\n        const resp = await getMovieReviews(movieId);\n        setMoviesReviews(resp);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoader(false);\n      }\n    };\n    fetchData();\n  }, [movieId]);\n\n  return movieReviews.length === 0 ? (\n    <h3 className=\"no-reviews\">\n      Sorry, but there are no reviews for this movie!\n    </h3>\n  ) : (\n    <div>\n      {loader && <Loader />}\n      {error !== null && <p className=\"error-bage\">{error}</p>}\n      <ul className=\"list-reviews list\">\n        {movieReviews.length !== 0 &&\n          movieReviews.map(({ id, author, content }) => (\n            <li key={id} className=\"item-casts\">\n              <h3 className=\"casts-name\">Author: {author}</h3>\n              <p className=\"casts-character\">Content: {content}</p>\n            </li>\n          ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Reviews;\n"],"names":["movieId","useParams","_useState","useState","_useState2","_slicedToArray","movieReviews","setMoviesReviews","_useState3","_useState4","loader","setLoader","_useState5","_useState6","error","setError","useEffect","fetchData","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","resp","_context","prev","next","getMovieReviews","sent","t0","message","finish","stop","apply","arguments","length","_jsx","className","children","_jsxs","Loader","map","_ref2","id","author","content"],"sourceRoot":""}